# Workflow derived from https://github.com/r-lib/actions/tree/master/examples

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ubuntu-latest

    env:
      # use GITHUB_TOKEN from GitHub to workaround rate limits in {remotes}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      # This ensures that errors get srcrefs
      R_KEEP_PKG_SOURCE: yes

    steps:

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          # Use the public version of RStudio package manager to serve binaries for Linux and Windows
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r-dependencies@v1
        with:
          extra-packages: |
            rcmdcheck
            covr

      - name: Check
        env:
          # Turns off CRAN incoming checks which use remote resources (i.e. the internet)
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Test coverage
        run: covr::codecov()
        shell: Rscript {0}
